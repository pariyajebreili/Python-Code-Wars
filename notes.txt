-if number % 2 : --> one means true
  print('Odd')
  
-def even_or_odd(number):
  return 'Even' if number % 2 == 0 else 'Odd'

-To convert boolean to string in python, we will use **str(bool)** and then it will be converted to string.

-To make the number negetive --> -abs(number)

-if the array is empty return []-->  if not arr: return [] 

-for count the positive number -->  pos = sum(1 for x in arr if x > 0)
                               -->  neg = sum(x for x in arr if x < 0)
							   

- map function --> The map() function applies a given function to each item of an iterable (list, tuple etc.) and returns an iterator.
--> map(function, iterable)
-->int(x) Return an integer object constructed from a number or string x.

-to repeate a string n times we use (repeat * string) 

-if we want to get the distinct number in list --> mylist = ['nowplaying', 'PBS', 'PBS', 'nowplaying', 'job', 'debate', 'thenandnow']
													myset = set(mylist)
													print(myset)
;

-if we want to count the numbers of sth in array use --> count()
														def find_it(seq):
															return [x for x in seq if seq.count(x) % 2][0]
;

-to capetlized all the letter --> upper()
 for captlized just the first letter --> capetlized()
 
-The join() method returns a string created by joining the elements of an iterable by string separator.
	test = {'Python', 'Java', 'Ruby'}
	s = '->->' 
	print(s.join(test))
	
	output : Python->->Ruby->->Java
	
-The ord() function returns the number representing the unicode code of a specified character.

-Zip Function = The zip() function returns a zip object, which is an iterator of tuples where the first item in each passed iterator is paired together, 
and then the second item in each passed iterator are paired together etc.

a = ("John", "Charles", "Mike")
b = ("Jenny", "Christy", "Monica")

x = zip(a, b)

answer = (('John', 'Jenny'), ('Charles', 'Christy'), ('Mike', 'Monica'))


- if the upper and lower matters in string we should turn all character to lower by lower()
																or to capetlized by upper()
;


-counter() --> counting how many each character has been repeated

>>> # Use a string as an argument
>>> Counter("mississippi")
Counter({'i': 4, 's': 4, 'p': 2, 'm': 1})



-   (double  spaces) ==> (elbuod  secaps)  or  ('a b c d') ==> ('a b c d')
	for reversuing this we use the function below:
	
		def reverse_words(str):
		return ' '.join(s[::-1] for s in str.split(' '))
	
;


-isinstance() --> Nesting Structure Comparison
	class myObj:
	
	name = "John"

	y = myObj()

	x = isinstance(y, myObj)
	


-The format() method formats the specified value(s) and insert them inside the string's placeholder.

The placeholder is defined using curly brackets: {}. Read more about the placeholders in the Placeholder section below.

The format() method returns the formatted string.

txt1 = "My name is {fname}, I'm {age}".format(fname = "John", age = 36) --> My name is John, I'm 36


-set() --> wouldn't repeat the number in the list and won't let reapted number in it.


-string.ascii_lowercase[:26] --> give the a-z alphabet but we could code this in another form 
set(string.ascii_lowercase)

-issubset --> if something subset of other thing.


-The rstrip() method removes any trailing characters (characters at the end a string), space is the default trailing character to remove.

txt = "banana,,,,,ssqqqww....."
x = txt.rstrip(",.qsw")
print(x)

-->banana


txt = "banana,,,,,ssqqqww....."
x = txt.rstrip(".qsw") #i made the chnge in paranteses
print(x)

-->banana,,,,,


txt = ",,banana,,,,,ssqqqww....."
x = txt.rstrip(",.qsw")
print(x)

--> ,,banana